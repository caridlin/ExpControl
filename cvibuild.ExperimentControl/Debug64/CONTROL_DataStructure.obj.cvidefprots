[str_AnalogChannelNames]
Class="Function"
Prototype="char *str_AnalogChannelNames(int ch);"

[str_ChannelNames]
Class="Function"
Prototype="char *str_ChannelNames(int ch);"

[CONFIG_initBoards]
Class="Function"
Prototype="void CONFIG_initBoards(t_config *c);"

[CONFIG_init]
Class="Function"
Prototype="void CONFIG_init(t_config *c);"

[CONFIG_free]
Class="Function"
Prototype="void CONFIG_free(t_config *c);"

[DIGITIZEPARAMETERS_compare]
Class="Function"
Prototype="int DIGITIZEPARAMETERS_compare(t_digitizeParameters *p1, t_digitizeParameters *p2);"

[POINT_PlotLine]
Class="Function"
Prototype="void POINT_PlotLine(int panel, int control, t_point *p, t_point *pPrime, int couleur);"

[POINT_init]
Class="Function"
Prototype="void POINT_init(t_point *p);"

[POINT_isEqual]
Class="Function"
Prototype="int POINT_isEqual(t_point *p1, t_point *p2);"

[STEP_PARAM_free]
Class="Function"
Prototype="void STEP_PARAM_free(t_step_param *p);"

[STEP_PARAM_copy]
Class="Function"
Prototype="void STEP_PARAM_copy(t_step_param *dest, t_step_param *src);"

[STEP_PARAM_init]
Class="Function"
Prototype="void STEP_PARAM_init(t_step_param *p, int type);"

[STEP_PARAM_getListString]
Class="Function"
Prototype="void STEP_PARAM_getListString(char *result, t_step_param *p);"

[WFM_init]
Class="Function"
Prototype="void WFM_init(t_waveform *wfm, int type);"

[WFM_new]
Class="Function"
Prototype="t_waveform *WFM_new(t_sequence *seq);"

[WFM_free]
Class="Function"
Prototype="void WFM_free(t_waveform *w);"

[WFM_duplicate]
Class="Function"
Prototype="void WFM_duplicate(t_waveform *dest, t_waveform *source);"

[WFM_deleteWithReferences]
Class="Function"
Prototype="void WFM_deleteWithReferences(t_sequence *seq, int nr);"

[WFM_delete]
Class="Function"
Prototype="void WFM_delete(t_sequence *seq, int nr);"

[WFM_holdWaveform]
Class="Function"
Prototype="t_waveform *WFM_holdWaveform();"

[WFM_constWaveform]
Class="Function"
Prototype="t_waveform *WFM_constWaveform();"

[WFM_ptr]
Class="Function"
Prototype="t_waveform *WFM_ptr(t_sequence *seq, int wfmID);"

[WFM_isEqual]
Class="Function"
Prototype="int WFM_isEqual(t_waveform *w1, t_waveform *w2);"

[WFM_nameExistsN]
Class="Function"
Prototype="int WFM_nameExistsN(t_sequence *seq, const char *name, int startSearch, int reverseSearch);"

[WFM_checkForDuplicateNameAndRename]
Class="Function"
Prototype="int WFM_checkForDuplicateNameAndRename(t_sequence *seq, char *name);"

[WFM_checkForDuplicateNames]
Class="Function"
Prototype="void WFM_checkForDuplicateNames(t_sequence *seq);"

[WFM_nrFromName]
Class="Function"
Prototype="int WFM_nrFromName(t_sequence *seq, const char *name, int searchEnd);"

[WFM_ptrFromName]
Class="Function"
Prototype="t_waveform *WFM_ptrFromName(t_sequence *seq, const char *name);"

[WFM_hasVariableParameters]
Class="Function"
Prototype="int WFM_hasVariableParameters(t_waveform *wfm);"

[WFM_nrFromPtr]
Class="Function"
Prototype="int WFM_nrFromPtr(t_sequence *seq, t_waveform *wfm);"

[WFM_nrFromMenuID]
Class="Function"
Prototype="int WFM_nrFromMenuID(t_sequence *seq, int menuID);"

[WFM_addPositionInList]
Class="Function"
Prototype="void WFM_addPositionInList(t_sequence *seq);"

[WFM_findIdentical]
Class="Function"
Prototype="int WFM_findIdentical(t_sequence *seq, t_waveform *wfm);"

[WFM_nameExists]
Class="Function"
Prototype="int WFM_nameExists(t_sequence *seq, char *name);"

[WFM_checkAllIfActive]
Class="Function"
Prototype="void WFM_checkAllIfActive(t_sequence *seq);"

[WFM_FUNC_allocateMemory]
Class="Function"
Prototype="void WFM_FUNC_allocateMemory(t_waveform *wfm);"

[WFM_nFuncParams]
Class="Function"
Prototype="int WFM_nFuncParams(t_waveform *wfm);"

[WFM_name]
Class="Function"
Prototype="char *WFM_name(t_sequence *seq, int nr);"

[WFM_addChannels]
Class="Function"
Prototype="void WFM_addChannels(t_sequence *seq);"

[WFM_typeStr]
Class="Function"
Prototype="char *WFM_typeStr(t_waveform *wfm);"

[WFM_fillInfos]
Class="Function"
Prototype="void WFM_fillInfos(t_sequence *seq);"

[WFM_ADDR_allocateMatrix]
Class="Function"
Prototype="void WFM_ADDR_allocateMatrix(t_waveform *w);"

[WFM_ADDR_getMatrixValue]
Class="Function"
Prototype="int WFM_ADDR_getMatrixValue(t_waveform *w, int n, int x, int y);"

[WFM_ADDR_setMatrixValue]
Class="Function"
Prototype="void WFM_ADDR_setMatrixValue(t_waveform *w, int n, int x, int y, int value);"

[WFM_ADDR_findDMDwaveform]
Class="Function"
Prototype="t_waveform *WFM_ADDR_findDMDwaveform(t_sequence *seq);"

[TRANSFERFUNCT_init]
Class="Function"
Prototype="void TRANSFERFUNCT_init(t_transferFunction *f);"

[TRANSFERFUNCT_free]
Class="Function"
Prototype="void TRANSFERFUNCT_free(t_transferFunction *f);"

[TRANSFERFUNCT_copy]
Class="Function"
Prototype="t_transferFunction *TRANSFERFUNCT_copy(t_transferFunction *source);"

[TRANSFERFUNCT_apply]
Class="Function"
Prototype="double TRANSFERFUNCT_apply(t_transferFunction *f, double value);"

[TRANSFERFUNCT_applyInv]
Class="Function"
Prototype="double TRANSFERFUNCT_applyInv(t_transferFunction *f, double value);"

[TRANSFERFUNCT_new]
Class="Function"
Prototype="t_transferFunction *TRANSFERFUNCT_new(t_sequence *s);"

[TRANSFERFUNCT_ptr]
Class="Function"
Prototype="t_transferFunction *TRANSFERFUNCT_ptr(t_sequence *s, int nr);"

[TRANSFERFUNCT_nr]
Class="Function"
Prototype="int TRANSFERFUNCT_nr(t_sequence *s, const char *name);"

[TRANSFERFUNCT_ptrFromName]
Class="Function"
Prototype="t_transferFunction *TRANSFERFUNCT_ptrFromName(t_sequence *s, const char *name);"

[TRANSFERFUNCT_str]
Class="Function"
Prototype="char *TRANSFERFUNCT_str(t_transferFunction *f);"

[TRANSFERFUNCT_strInv]
Class="Function"
Prototype="char *TRANSFERFUNCT_strInv(t_transferFunction *f);"

[TRANSFERFUNCT_plotInv]
Class="Function"
Prototype="void TRANSFERFUNCT_plotInv(t_transferFunction *f, int panel, int ctrl, double minX, double maxX);"

[TRANSFERFUNCT_plot]
Class="Function"
Prototype="void TRANSFERFUNCT_plot(t_transferFunction *f, int panel, int ctrl, double minX, double maxX);"

[TRANSFERFUNCT_writeFormulasToTextbox]
Class="Function"
Prototype="void TRANSFERFUNCT_writeFormulasToTextbox(t_transferFunction *f, int panel, int ctrl);"

[DIGITALBLOCK_reset]
Class="Function"
Prototype="void DIGITALBLOCK_reset(t_digitalBlock *block);"

[DIGITALBLOCK_init]
Class="Function"
Prototype="void DIGITALBLOCK_init(t_digitalBlock *block);"

[DIGITALBLOCK_free_FAST]
Class="Function"
Prototype="void DIGITALBLOCK_free_FAST(t_digitalBlock *b);"

[DIGITALBLOCK_freeGroupBitmaps]
Class="Function"
Prototype="void DIGITALBLOCK_freeGroupBitmaps(t_digitalBlock *b);"

[DIGITALBLOCK_createGroupBitmapPtr]
Class="Function"
Prototype="void DIGITALBLOCK_createGroupBitmapPtr(t_digitalBlock *b);"

[DIGITALBLOCK_free]
Class="Function"
Prototype="void DIGITALBLOCK_free(t_digitalBlock *b);"

[DIGITALBLOCK_insert]
Class="Function"
Prototype="t_digitalBlock *DIGITALBLOCK_insert(t_sequence *seq, int nr);"

[DIGITALBLOCK_new]
Class="Function"
Prototype="t_digitalBlock *DIGITALBLOCK_new(t_sequence *seq);"

[DIGITALBLOCK_delete]
Class="Function"
Prototype="void DIGITALBLOCK_delete(t_sequence *seq, int nr);"

[DIGITALBLOCK_duplicate]
Class="Function"
Prototype="void DIGITALBLOCK_duplicate(t_digitalBlock *dest, t_digitalBlock *source);"

[DIGITALBLOCK_areIdentical]
Class="Function"
Prototype="int DIGITALBLOCK_areIdentical(t_digitalBlock *b1, t_digitalBlock *b2);"

[DIGITALBLOCK_getDuration]
Class="Function"
Prototype="unsigned long DIGITALBLOCK_getDuration(t_digitalBlock *block, int repetitionNo);"

[DIGITALBLOCK_calculateAllAbsoluteTimes]
Class="Function"
Prototype="long long DIGITALBLOCK_calculateAllAbsoluteTimes(t_sequence *seq, int repetition);"

[DIGITALBLOCK_ptr]
Class="Function"
Prototype="t_digitalBlock *DIGITALBLOCK_ptr(t_sequence *seq, int ID);"

[DIGITALBLOCK_hasWaveform]
Class="Function"
Prototype="int DIGITALBLOCK_hasWaveform(t_digitalBlock *b);"

[DIGITALBLOCK_hasConstVoltage]
Class="Function"
Prototype="int DIGITALBLOCK_hasConstVoltage(t_digitalBlock *b);"

[DIGITALBLOCK_hasVariablePulse]
Class="Function"
Prototype="int DIGITALBLOCK_hasVariablePulse(t_digitalBlock *b);"

[DIGITALBLOCK_getLoopRepetitions]
Class="Function"
Prototype="int DIGITALBLOCK_getLoopRepetitions(t_sequence *seq, int nr);"

[DIGITALBLOCK_setLoop]
Class="Function"
Prototype="void DIGITALBLOCK_setLoop(t_sequence *seq, int loopStart, int nElements, int nCopies);"

[DIGITALBLOCK_removeBlocks]
Class="Function"
Prototype="void DIGITALBLOCK_removeBlocks(t_sequence *seq, int startBlock, int nBlocks, int checkPanels);"

[SEQUENCE_initSimulateBuffers]
Class="Function"
Prototype="void SEQUENCE_initSimulateBuffers(t_sequence *seq);"

[SEQUENCE_init]
Class="Function"
Prototype="void SEQUENCE_init(t_sequence *seq);"

[SEQUENCE_new]
Class="Function"
Prototype="t_sequence *SEQUENCE_new();"

[SEQUENCE_ptr]
Class="Function"
Prototype="t_sequence *SEQUENCE_ptr(int nr);"

[SEQUENCE_hasLoops]
Class="Function"
Prototype="int SEQUENCE_hasLoops(t_sequence *seq);"

[SEQUENCE_hasSweeps]
Class="Function"
Prototype="int SEQUENCE_hasSweeps(t_sequence *seq);"

[SEQUENCE_freeSimulateBuffers]
Class="Function"
Prototype="void SEQUENCE_freeSimulateBuffers(t_sequence *seq);"

[SEQUENCE_free]
Class="Function"
Prototype="void SEQUENCE_free(t_sequence *seq);"

[SEQUENCE_freeRedo]
Class="Function"
Prototype="void SEQUENCE_freeRedo(t_sequence *seq);"

[SEQUENCE_addDateLastModified]
Class="Function"
Prototype="void SEQUENCE_addDateLastModified(t_sequence *seq, int month, int day, int year);"

[SEQUENCE_detectLoops_areDigitalBlocksIdentical]
Class="Function"
Prototype="int SEQUENCE_detectLoops_areDigitalBlocksIdentical(t_digitalBlock *b1, t_digitalBlock *b2);"

[SEQUENCE_detectLoops_hasIdenticalBlockBefore]
Class="Function"
Prototype="int SEQUENCE_detectLoops_hasIdenticalBlockBefore(t_sequence *seq, int compareBlockID, int maxBlocksPerLoop, int minimumPeriod, int *identicalBlock);"

[SEQUENCE_detectLoops_areBlocksIdentical]
Class="Function"
Prototype="int SEQUENCE_detectLoops_areBlocksIdentical(t_sequence *seq, int startBlock1, int startBlock2, int nBlocksToCompare);"

[SEQUENCE_detectLoops]
Class="Function"
Prototype="void SEQUENCE_detectLoops(t_sequence *seq, int maxBlocksPerLoop, int minimumPeriod, int progressDialog, int checkPanels);"

[SEQUENCE_getNumberOfGpibCommandsDuringSequence]
Class="Function"
Prototype="int SEQUENCE_getNumberOfGpibCommandsDuringSequence(t_sequence *seq);"

[SEQUENCE_DACchannelName]
Class="Function"
Prototype="char *SEQUENCE_DACchannelName(t_sequence *seq, int ch);"

[SEQUENCE_isIdleSequence]
Class="Function"
Prototype="int SEQUENCE_isIdleSequence(t_sequence *seq);"

[SEQUENCE_calculateAutoFocusValues]
Class="Function"
Prototype="double *SEQUENCE_calculateAutoFocusValues(int autoFocusNumImages, double autoFocusCenterVoltage, double autoFocusStepVoltage);"

[SEQUENCE_getSlicingFrequency]
Class="Function"
Prototype="int SEQUENCE_getSlicingFrequency(t_sequence *seq, double *freqOffsetMHz, double *centerFreqMHz);"

[SEQUENCE_updateAutoFocusValues]
Class="Function"
Prototype="void SEQUENCE_updateAutoFocusValues(t_sequence *seq);"

[ANALOGSAMPLE_init]
Class="Function"
Prototype="void ANALOGSAMPLE_init(t_analogSample *a);"

[DIGITALEVENT_init]
Class="Function"
Prototype="void DIGITALEVENT_init(t_digitalEvent *e);"

[DIGITALEVENT_free]
Class="Function"
Prototype="void DIGITALEVENT_free(t_digitalEvent *e);"

[DIGITALEVENT_compare]
Class="Function"
Prototype="int DIGITALEVENT_compare(void *e1, void *e2);"

[DIGITALEVENT_copyValues]
Class="Function"
Prototype="void DIGITALEVENT_copyValues(t_digitalEvent *target, t_digitalEvent *source);"

[DIGITALEVENT_new]
Class="Function"
Prototype="t_digitalEvent *DIGITALEVENT_new(struct ListStructTag *list, long long time, unsigned int duration, unsigned long *digValues);"

[OUTPUTDATA_freeDigitalEvents]
Class="Function"
Prototype="void OUTPUTDATA_freeDigitalEvents(t_outputData *o);"

[ADWINDATA_init]
Class="Function"
Prototype="void ADWINDATA_init(t_adwinData *a);"

[ADWINDATA_free]
Class="Function"
Prototype="void ADWINDATA_free(t_adwinData *a);"

[OUTPUTDATA_free]
Class="Function"
Prototype="void OUTPUTDATA_free(t_outputData *o, int freeLastValues);"

[OUTPUTDATA_resetCounters]
Class="Function"
Prototype="void OUTPUTDATA_resetCounters(t_outputData *o);"

[OUTPUTDATA_init]
Class="Function"
Prototype="void OUTPUTDATA_init(t_outputData *o, int initLastData);"

[GPIBCOMMAND_init]
Class="Function"
Prototype="void GPIBCOMMAND_init(t_gpibCommand *item, int type);"

[GPIBCOMMAND_free]
Class="Function"
Prototype="void GPIBCOMMAND_free(t_gpibCommand *item);"

[GPIBCOMMAND_new_at_front]
Class="Function"
Prototype="t_gpibCommand *GPIBCOMMAND_new_at_front(t_sequence *seq);"

[GPIBCOMMAND_new_at_second]
Class="Function"
Prototype="t_gpibCommand *GPIBCOMMAND_new_at_second(t_sequence *seq);"

[GPIBCOMMAND_new]
Class="Function"
Prototype="t_gpibCommand *GPIBCOMMAND_new(t_sequence *seq);"

[GPIBCOMMAND_delete]
Class="Function"
Prototype="void GPIBCOMMAND_delete(t_sequence *seq, int nr);"

[GPIBCOMMAND_ptr]
Class="Function"
Prototype="t_gpibCommand *GPIBCOMMAND_ptr(t_sequence *seq, int ID);"

[GPIBCOMMAND_duplicate]
Class="Function"
Prototype="void GPIBCOMMAND_duplicate(t_gpibCommand *dest, t_gpibCommand *source);"

[GPIBCOMMAND_ptrFromName]
Class="Function"
Prototype="t_gpibCommand *GPIBCOMMAND_ptrFromName(t_sequence *seq, char *name);"

[GPIBCOMMAND_nrFromMenuID]
Class="Function"
Prototype="int GPIBCOMMAND_nrFromMenuID(t_sequence *seq, int menu, int menuID);"

[GPIBCOMMAND_name]
Class="Function"
Prototype="char *GPIBCOMMAND_name(t_sequence *seq, int nr);"

[GPIBCOMMAND_strMultiply]
Class="Function"
Prototype="const char *GPIBCOMMAND_strMultiply(double multiply);"

[GPIBDEVICE_resetLastValues]
Class="Function"
Prototype="void GPIBDEVICE_resetLastValues(t_gpibDevice *item, int resetWaveforms);"

[GPIBDEVICE_valuesChanged]
Class="Function"
Prototype="int GPIBDEVICE_valuesChanged(t_gpibDevice *item, int i, int nCopies);"

[GPIBDEVICE_copySettings]
Class="Function"
Prototype="void GPIBDEVICE_copySettings(t_gpibDevice *target, t_gpibDevice *source);"

[GPIBDEVICE_init]
Class="Function"
Prototype="void GPIBDEVICE_init(t_gpibDevice *item);"

[GPIBDEVICE_free]
Class="Function"
Prototype="void GPIBDEVICE_free(t_gpibDevice *item);"

[GPIBDEVICE_new]
Class="Function"
Prototype="t_gpibDevice *GPIBDEVICE_new(t_config *c);"

[GPIBDEVICE_deleteAll]
Class="Function"
Prototype="void GPIBDEVICE_deleteAll(t_config *c);"

[GPIBDEVICE_ptrConfig]
Class="Function"
Prototype="t_gpibDevice *GPIBDEVICE_ptrConfig(t_config *c, int address);"

[GPIBDEVICE_ptr]
Class="Function"
Prototype="t_gpibDevice *GPIBDEVICE_ptr(int address);"

[GPIBDEVICE_ptrChannel]
Class="Function"
Prototype="t_gpibDevice *GPIBDEVICE_ptrChannel(int channel);"

[GPIBDEVICE_isType]
Class="Function"
Prototype="int GPIBDEVICE_isType(t_gpibDevice *d, int type);"

[GPIBDEVICE_nameFromAddress]
Class="Function"
Prototype="char *GPIBDEVICE_nameFromAddress(int address);"

[getStepOutputVoltage]
Class="Function"
Prototype="double getStepOutputVoltage(double stepFrom, double stepTo, int stepRep, int nRepetitions, int repetition);"

[dTime]
Class="Function"
Prototype="void dTime(unsigned long time, double *dtime, int *i);"

[strTime]
Class="Function"
Prototype="char *strTime(unsigned long time_50ns);"

[nAOBoards]
Class="Function"
Prototype="int nAOBoards();"

[nDIOBoards]
Class="Function"
Prototype="int nDIOBoards();"

[calculateArrOfDigitizedValues]
Class="Function"
Prototype="double *calculateArrOfDigitizedValues(t_digitizeParameters *p);"

[DigitalToAnalog]
Class="Function"
Prototype="double DigitalToAnalog(long digital, t_digitizeParameters *p);"

[AnalogToDigital]
Class="Function"
Prototype="long AnalogToDigital(double analog, t_digitizeParameters *p);"

[PARAMETERSWEEP_init]
Class="Function"
Prototype="void PARAMETERSWEEP_init(t_parameterSweep *p);"

[PARAMETERSWEEP_free]
Class="Function"
Prototype="void PARAMETERSWEEP_free(t_parameterSweep *p);"

[PARAMETERSWEEP_new]
Class="Function"
Prototype="t_parameterSweep *PARAMETERSWEEP_new(t_sequence *s);"

[PARAMETERSWEEP_deleteAll]
Class="Function"
Prototype="void PARAMETERSWEEP_deleteAll(t_sequence *s);"

[PARAMETERSWEEP_getAllFromDigitalBlocks]
Class="Function"
Prototype="void PARAMETERSWEEP_getAllFromDigitalBlocks(t_sequence *s);"

[PARAMETERSWEEP_appendFromWaveform]
Class="Function"
Prototype="void PARAMETERSWEEP_appendFromWaveform(t_sequence *s, int wfmNr, const char *channelName, const char *description);"

[PARAMETERSWEEP_appendFromDMDWaveform]
Class="Function"
Prototype="void PARAMETERSWEEP_appendFromDMDWaveform(t_sequence *s);"

[PARAMETERSWEEP_appendFromSweepGpib]
Class="Function"
Prototype="void PARAMETERSWEEP_appendFromSweepGpib(t_sequence *s, t_gpibCommand *g, const char *channelName, const char *description);"

[PARAMETERSWEEP_getAllFromWaveforms]
Class="Function"
Prototype="void PARAMETERSWEEP_getAllFromWaveforms(t_sequence *s);"

[PARAMETERSWEEP_getAllFromGpibCommands]
Class="Function"
Prototype="void PARAMETERSWEEP_getAllFromGpibCommands(t_sequence *s);"

[PARAMETERSWEEP_getAllFromSequence]
Class="Function"
Prototype="void PARAMETERSWEEP_getAllFromSequence(t_sequence *s);"

[PARAMETERSWEEPS_getValueForRepetition]
Class="Function"
Prototype="double PARAMETERSWEEPS_getValueForRepetition(t_parameterSweep *p, int repetition);"

[TABLECONFIG_init]
Class="Function"
Prototype="void TABLECONFIG_init(t_tableConfig *c, int nr);"

[CCDSETTINGS_init]
Class="Function"
Prototype="void CCDSETTINGS_init(t_ccdSettings *c);"

[CCDSETTINGS_free]
Class="Function"
Prototype="void CCDSETTINGS_free(t_ccdSettings *c);"

[CCDSETTINGS_new]
Class="Function"
Prototype="t_ccdSettings *CCDSETTINGS_new(t_sequence *seq);"

[CCDSETTINGS_ptr]
Class="Function"
Prototype="t_ccdSettings *CCDSETTINGS_ptr(t_sequence *seq, int index);"

[CCDSETTINGS_duplicate]
Class="Function"
Prototype="void CCDSETTINGS_duplicate(t_ccdSettings *dest, t_ccdSettings *source);"

[CCDSETTINGS_getFromSerialNo]
Class="Function"
Prototype="int CCDSETTINGS_getFromSerialNo(t_sequence *seq, int serialNo);"

[DMDIMAGE_writeBinaryDMDPattern]
Class="Function"
Prototype="int DMDIMAGE_writeBinaryDMDPattern(char *filename, t_waveform *dmdWaveform, int repetition);"

[DMDIMAGE_writeBinaryDMDPatternSinglePicture]
Class="Function"
Prototype="int DMDIMAGE_writeBinaryDMDPatternSinglePicture(char *filename, t_waveform *dmdWaveform, int repetition, int picNum);"

[DMDIMAGE_writeCommandFile]
Class="Function"
Prototype="int DMDIMAGE_writeCommandFile(void *functionData);"

[DMDIMAGE_THREAD_writeCommandFile]
Class="Function"
Prototype="void DMDIMAGE_THREAD_writeCommandFile(t_sequence *seq, t_waveform *dmdWaveform, int repetition);"

[DMDIMAGE_createBitmap]
Class="Function"
Prototype="int DMDIMAGE_createBitmap(t_waveform *wfm, int repetition, int picNum);"

[EXTDEV_new]
Class="Function"
Prototype="t_ext_device *EXTDEV_new(t_sequence *seq);"

[EXTDEV_init]
Class="Function"
Prototype="void EXTDEV_init(t_ext_device *extdev, int deviceTyp);"

[EXTDEV_nameExistsN]
Class="Function"
Prototype="int EXTDEV_nameExistsN(t_sequence *seq, const char *name, int startSearch, int reverseSearch);"

[EXTDEV_checkForDuplicateNameAndRename]
Class="Function"
Prototype="int EXTDEV_checkForDuplicateNameAndRename(t_sequence *seq, char *name);"

[EXTDEV_IdExists]
Class="Function"
Prototype="int EXTDEV_IdExists(t_sequence *seq, unsigned int ID, int startSearch, int reverseSearch);"

[EXTDEV_checkForDuplicateIdandChange]
Class="Function"
Prototype="int EXTDEV_checkForDuplicateIdandChange(t_sequence *seq, unsigned int *id);"

